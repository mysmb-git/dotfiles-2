# https://github.com/mathiasbynens/dotfiles/blob/master/.functions

# create and open a new directory
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# size a file for a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
    encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript
    else # pipe
        python -mjson.tool | pygmentize -l javascript
    fi
}

# all the info that dig can find
function digdug() {
    dig +nocmd "$1" any +multiline +noall +answer
}

# open model spec and code
om () {
  vim `ack -g "app/models/$*.rb$"` -c ":vsplit" -c ":call OpenTestAlternate()"
}

# open controller spec and code
oc () {
  vim `ack -g "app/controllers/$*_controller.rb$"` -c ":vsplit" -c ":call OpenTestAlternate()"
}

# empty a file and tail it
cleartail() {
  echo "" > "$1"
  clear
  tail -f "$1"
}

# look for a domain's IP defined in /etc/hosts
dighosts() {
  ack `dig +short $1` /etc/hosts
}

etchosts() {
  ack $1 /etc/hosts
}

pout() {
  tail -f ~/Library/Logs/Pow/apps/$1.log
}

pouts() {
  tail -f ~/Library/Logs/Pow/apps/*.log
}

search-activemerchant-gateways-for() {
  ag $1 $HOME/github/sdball/active_merchant/lib/active_merchant/billing/gateways ${@:2}
}

define() {
  trans -d en: $1 | less -niSFX
}

github-clone() {
  _github_url=$1
  _user=`echo $_github_url | cut -d '/' -f 1 | cut -d ':' -f 2`
  _repo=`echo $_github_url | cut -d '/' -f 2 | cut -d '.' -f 1`
  mkd $HOME/github/$_user
  git clone $_github_url 2> /dev/null
  cd $_repo
}

vim() {
  if [[ $# -eq 1 ]]; then
    command vim $1
  else
    command vim -O $*
  fi
}

base16-theme() {
  if [[ $# -eq 2 ]]; then
      source $HOME/.config/base16-shell/scripts/$1
  else
      ln -sf $HOME/.config/base16-shell/scripts/$1 $HOME/.base16_theme
      source $HOME/.base16_theme
  fi
}
_base16-theme() {
  _files -W $HOME/.config/base16-shell/scripts/
}
compdef _base16-theme base16-theme

stargazers() {
  curl -s https://api.github.com/repos/$1 | jq ".stargazers_count"
}

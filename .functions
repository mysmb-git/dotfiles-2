# https://github.com/mathiasbynens/dotfiles/blob/master/.functions

# create and open a new directory
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# size a file for a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
    encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript
    else # pipe
        python -mjson.tool | pygmentize -l javascript
    fi
}

# all the info that dig can find
function digdug() {
    dig +nocmd "$1" any +multiline +noall +answer
}

# open model spec and code
om () {
  vim `ack -g "app/models/$*.rb$"` -c ":vsplit" -c ":call OpenTestAlternate()"
}

# open controller spec and code
oc () {
  vim `ack -g "app/controllers/$*_controller.rb$"` -c ":vsplit" -c ":call OpenTestAlternate()"
}

# empty a file and tail it
cleartail() {
  echo "" > "$1"
  clear
  tail -f "$1"
}

# look for a domain's IP defined in /etc/hosts
dighosts() {
  ack `dig +short $1` /etc/hosts
}

etchosts() {
  ack $1 /etc/hosts
}

pout() {
  tail -f ~/Library/Logs/Pow/apps/$1.log
}

pouts() {
  tail -f ~/Library/Logs/Pow/apps/*.log
}

search-activemerchant-gateways-for() {
  ag $1 $HOME/github/sdball/active_merchant/lib/active_merchant/billing/gateways ${@:2}
}

define() {
  trans -d en: $1 | less -niSFX
}

github-clone() {
  _github_url=$1
  _user=`echo $_github_url | cut -d '/' -f 1 | cut -d ':' -f 2`
  _repo=`echo $_github_url | cut -d '/' -f 2 | cut -d '.' -f 1`
  mkd $HOME/github/$_user
  git clone $_github_url 2> /dev/null
  cd $_repo
}

stargazers() {
  curl -s https://api.github.com/repos/$1 | jq ".stargazers_count"
}

github-repo-stats() {
  curl -s https://api.github.com/repos/$1 | jq ". | {repo: .full_name, stars: .stargazers_count, watchers: .watchers_count, forks: .forks_count, subscribers: .subscribers_count, open_issues: .open_issues_count}"
}

weather() {
  curl -s http://wttr.in/$1
}

app-tree-imgcat() {
  mix app.tree --format dot &> /dev/null && dot -Tpng app_tree.dot \
  | imgcat; rm -f app_tree.dot
}
deps-tree-imgcat() {
  mix deps.tree --format dot &> /dev/null && dot -Tpng deps_tree.dot \
  | imgcat; rm -f app_tree.dot
}

man() {
    LESS_TERMCAP_mb=$'\e'"[1;31m" \
    LESS_TERMCAP_md=$'\e'"[1;31m" \
    LESS_TERMCAP_me=$'\e'"[0m" \
    LESS_TERMCAP_se=$'\e'"[0m" \
    LESS_TERMCAP_so=$'\e'"[1;44;33m" \
    LESS_TERMCAP_ue=$'\e'"[0m" \
    LESS_TERMCAP_us=$'\e'"[1;32m" \
    command man "$@"
}

docker-for-mac() {
  env | ag "^DOCKER_" | cut -d '=' -f 1 | while read variable; do unset $variable; done
  echo "docker will now use docker for mac"
}

docker-toolbox() {
  eval $(docker-machine env default)
  echo "docker will now use the docker-machine vm"
}

marked() {
  if [ $1 ]; then
    open -a "Marked 2" $1;
  else
    open -a "Marked 2";
  fi
}

readme() {
  if [[ -e /Applications/Marked\ 2.app ]]; then
    marked "README.md" || marked "README.markdown" || echo "Markdown README not found";
  else
    less "README.md" || less "README.markdown" || echo "Markdown README not found";
  fi
}

stretch-time() {
  terminal-notifier -title 'Stretch Time' -message 'Time to get up and stretch!' -group 'works' -sound 'Glass'
}

# -- cool fzf things --
vb(){
  #List all vagrant boxes available in the system including its status
  cd $(cat ~/.vagrant.d/data/machine-index/index | jq '.machines[] | {name, vagrantfile_path, state}' | jq '.name + "," + .state  + "," + .vagrantfile_path'| sed 's/^"\(.*\)"$/\1/'| column -s, -t | sort -rk 2 | fzf | awk '{print $3}')
}

# browse chrome history
chrome-history() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{{::}}'

  # Copy History DB to circumvent the lock
  # - See http://stackoverflow.com/questions/8936878 for the file path
  cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

opera-history() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{{::}}'

  # Copy History DB to circumvent the lock
  # - See http://stackoverflow.com/questions/8936878 for the file path
  cp -f ~/Library/Application\ Support/com.operasoftware.Opera/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

# fshow - git commit browser
fshow() {
  git l |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

recent() {
  local branches branch
  branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

remote() {
  git fetch
  local branches branch
  branches=$(git branch --remote | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# -- from https://github.com/erichs
pb () {
  # 'clipboard DWIM tool'
  # example 'pb  # paste'
  # example 'echo hi | pb  # copy'
  # example 'echo hi | pb | cat -  # copy and paste'
  # example 'pb </tmp/file  # copy'
  # example 'pb >/tmp/file  # paste'
  # example 'pb </tmp/file1 >/tmp/file2  # copy and paste'
  if [[ -p /dev/stdin ]]
  then
    pbcopy
  fi
  if [[ ! -t 0 && ! -p /dev/stdin ]]
  then
    pbcopy
  fi
  if [[ -t 1 ]]
  then
    if [[ -t 0 ]]
    then
      pbpaste
    fi
  fi
  if [[ -p /dev/stdout ]]
  then
    pbpaste
  fi
  if [[ ! -t 1 && ! -p /dev/stdout ]]
  then
    pbpaste
  fi
}

pbvim() {
  local _pbfile=/var/tmp/pbvim
  pbpaste > $_pbfile
  vim -b $_pbfile
  pbcopy <$_pbfile
  rm $_pbfile
}

# -- from https://github.com/erichs
wut () {
  local needle="$*"
  local out file key OIFS
  OIFS=$IFS
  IFS=$'\n' out=($(rg -l $needle | fzf --reverse \
                   --preview="rg --color -C 5 $needle {}" \
                   --prompt '(ctrl-{l,o,e,g} to link, open, edit, or browse in github)> ' \
                   --expect=ctrl-l,ctrl-o,ctrl-e,ctrl-g))
  IFS=$OIFS
  if [ -z "$out" ]; then
    return
  fi
  key=$(echo "$out" | cut -d ' ' -f 1)
  file=$(echo "$out" | sed -e 's/[^ ]* //')
  echo $out
  case $key in
    (ctrl-l) linkto $file
      return ;;
    (ctrl-o) open $file ;;
    (ctrl-e) ${EDITOR:-vim} "$file" ;;
    (ctrl-g) gh $file ;;
    (*)  ;;
  esac
  echo $file
  echo -n $file | pbcopy
}

# -- from https://github.com/erichs
linkto () {
# given relative filepath, find corresponding github URL
# copy this to pastebuffer, and emit to stdout
  local origin=$(git ls-remote --get-url | sed -Ee 's#https?://##')
  local user=$(echo $origin | sed -Ee 's#^.*[/:]+(.*)/.*$#\1#')
  local project=$(echo $origin | sed -Ee 's#^.*[/:]+.*/(.*).git$#\1#')
  (
    cd $(dirname $*)
    local urlpath=$(find $(pwd) -name $(basename $*) -maxdepth 1 | sed -n -e "s/^.*${project}//p")
    local url="https://github.com/${user}/${project}/blob/master${urlpath}"
    echo -n $url | pb | cat -
  )
}

# -- from https://github.com/erichs
gh () {
# open relative filepath in github
  open `linkto $*`
}

b16() {
  theme=$(ls $HOME/.config/base16-shell/scripts/base16*.sh | while read file; do basename $file | cut -d '.' -f 1 | sed -e 's/-/_/'; done | fzf --tac)
  eval $theme
}

git() {
  if [[ "$*" =~ "pull" ]]; then
    echo "Don't git pull."
    return 0
  fi

  if [[ "$*" =~ "push --all" ]]; then
    echo "Don't git push --all."
    return 0
  fi

  command git $*
}

sleep-screen() {
  pmset displaysleepnow
}

lock-system() {
  "/System/Library/CoreServices/Menu Extras/User.menu/Contents/Resources/CGSession" -suspend
}

npm-package() {
  jq ".$2" ~/.npm/$1/*/package/package.json | tail -1
}

npm-dependencies() {
  jq -r '.dependencies | keys[]' package.json | while read package; do echo $package}`npm-package $package description | cut -c1-100`}`npm-package $package homepage`; done | column -s '}' -t | less -niSFX
}

npm-dev-dependencies() {
  jq -r '.devDependencies | keys[]' package.json | while read package; do echo $package}`npm-package $package description | cut -c1-100`}`npm-package $package homepage`; done | column -s '}' -t | less -niSFX
}

rga() {
  rg "$*"
}

external-ip-address() {
  curl https://duckduckgo.com\?q=ip+address -s | rg -o "Your IP address is \S+"
}

random-md5() {
  ruby -r faker -e "puts Faker::Crypto.md5"
}

random-sha1() {
  ruby -r faker -e "puts Faker::Crypto.sha1"
}

random-sha256() {
  ruby -r faker -e "puts Faker::Crypto.sha256"
}

ht() {
  head $*; echo ".\n.\n.\n."; tail $*
}

ww() {
  if type lww &>/dev/null; then
    lww
  fi
  echo; echo 'PWD'
  pwd
  echo; echo 'GIT STATUS'
  git status -bs
  echo
}

check-for-fit-fdescribe() {
  rg -i '\bf(it|describe)\b.*\{' -t js -q &> /dev/null && echo "$(tput setaf 0; tput bold)($(tput setaf 1)f$(tput setaf 0)) $(tput sgr0)"
}

check-for-dirty-working-tree() {
  [[ -z $(git --no-optional-locks status -s) ]] || echo "$(tput setaf 0; tput bold)($(tput setaf 3)c$(tput setaf 0)) $(tput sgr0)"
}

prompt-tags() {
  echo "`check-for-fit-fdescribe``check-for-dirty-working-tree`"
}

terse() {
  precmd() {
    PS1="`prompt-tags`$ "
  }
}

verbose() {
  precmd() {
    PS1="`pwd` `prompt-tags`$ "
  }
}

vverbose() {
  precmd() {
    PS1="`pwd` (`git rev-parse --abbrev-ref HEAD`) `prompt-tags`$ "
  }
}

vvverbose() {
  precmd() {
    echo '---'
    if type lww &>/dev/null; then
      lww
    fi
    if git branch -r | rg `git current-branch` -q; then
      echo "( `git divc | tr '\n' ' '`)"
    else
      echo "( local branch only )"
    fi
    git status --short
    git branch --list -vv
    PS1="`pwd` (`git rev-parse --abbrev-ref HEAD`) `prompt-tags`$ "
  }
}

cf() {
  rg -i '\bf(it|describe)\b.*\{' -t js
}

